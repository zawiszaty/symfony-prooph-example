<?php

declare(strict_types=1);

namespace Tests\Domain\Common\ValueObject;

use App\Domain\Common\ValueObject\AggregateRootId;
use Assert\InvalidArgumentException;
use Tests\TestCase;
use Assert\Assertion;

class AggregateRootIdTest extends TestCase
{
    private $aggregateRootId;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        $this->aggregateRootId = AggregateRootId::withId('e8298b0e-8ac3-4ee2-99c1-fcf09d4ba72b');
    }

    public function testFromString()
    {
        $this->assertSame($this->aggregateRootId->toString(), 'e8298b0e-8ac3-4ee2-99c1-fcf09d4ba72b');
    }

    public function testGenerate()
    {
        $id = AggregateRootId::generate();
        Assertion::uuid($id->toString());
        $this->assertSame(1, 1);
    }

    public function test_it_throw_exception_when_get_not_uuid()
    {
        $this->expectException(InvalidArgumentException::class);
        AggregateRootId::withId("bla bla bla");
    }
}
